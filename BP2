%这个编译是错误的，为了使输出结果fore数组的维度正确，我将隐含层和输出层都改为了28，但是 168行的  E(ii)=E(ii)+sum(abs(e));  这一条代码出错
%赋值出错，我也改不出来。
%% 清空环境变量
clc
clear
%% 载入数据之后的峰值定位,以及对应的BP网络输出
data = load('yzh.txt');  %load读取数据
x=data(:,1);            % x取了第一列
x=x';                   %矩阵的转置，将列转变成行
ls = 30;                %因为这里的片段处理，整体中其实已经说明了ls = 30
for i=2:ls
dat=data(:,i);           %dat分别读取了data中的每一列，而且每次只读一列
N=length(dat);            % N = 1050
lambda=5000;                 %二阶微分算子滤波
I=speye(N);                 %将产生一个N*N的稀疏矩阵，对角线上的值为1
D2 = spdiags(ones(N-2,1)*[1 -2 1],[0 1 2],N-2,N);
%这条命令返回带状稀疏矩阵，D2的大小为1013 * 1015
%ones(N-2,1)*[1 -2 1]为1013*3的数组，一三两列是1，第二列是-2  N-2，N分别指定了
%行和列的维数,将会得到对角线分别为1 -2 1的矩阵，为什么要 N-2 因为要对称啊，
%三条“对角线”
trend = inv(I+lambda^2*D2'*D2)*dat; %inv(B)即为b的逆矩阵，即为(I+lambda^2*D2'*D2)\dat
y=dat-trend;                %将y的数据从右往左写，y是一列一列的
jxoutput(:,i-1)=[y];      %y每次只有一列，jxoutput从右边一步一步记录y的值
end                              %其实上面的部分是扣除基线的
global tzf             
result=zeros(ls,1015);           %建立一个30*1015的零矩阵
k=1;
for i=1:ls-1
ss=jxoutput(:,i)'; 
s=ss(1:1015);                    %ss的大小刚好是1*1015，即全部取了
% subplot(h1); 整体代码里面有这一段，h1是定义的坐标轴
plot(x,s)
xlabel('波数');
ylabel('幅值 A');
title('原始信号');
[c,l]=wavedec(s,3,'db1');   % wavedec 使用特定小波或特定的小波分解滤波器对执行多级一维小波分析。 这里用的是多贝西小波
%[c,l] = wavedec(x,n,wname) 返回的信号的小波分解x在水平 n使用小波wname。
%输出分解结构由小波分解向量 c和簿记向量组成l，其中包含按级别的系数数。
a3=appcoef(c,l,'db1',3);   %appcoef是一维小波分析函数，计算一维信号的近似系数 具体意义这里要查书，Google查不到
d3=detcoef(c,l,3); %detcoef是一维小波分析函数   D = detcoef(C,L,N)N从小波分解结构中提取水平的细节系数[C,L]。
d2=detcoef(c,l,2);
d1=detcoef(c,l,1);
softd1=wthresh(d1,'s',70);  % Y = wthresh(X,sorh,T) 返回由sorh向量或矩阵表示的软阈值或硬阈值X。T是阈值。
softd2=wthresh(d2,'s',70); 
softd3=wthresh(d3,'s',70);
c2=[a3,softd3,softd2,softd1];
s3=waverec(c2,l,'db1');  %X = waverec(C,L,'wname')X基于多级小波分解结构[C,L]和小波重构信号。
result(k,1:1015)=s3;
k=k+1;
end                                  %中间这一段代码是小波滤波
aa=result;
bb=jxoutput';%这里转置取不取的出错地方不一样！ jxoutput可能意为简写输出或者并列输出
xx=x(1,:);                 %  xx将x的内容全部取了出来，差不多就是赋值了
t=1;                    
for kk=1:ls-1               %看到这里,可以参考李津蓉寻峰函数的论文
yy=aa(kk,:);  
qjxqd=bb(kk,:);         %取极限求导
[v,l]=findpeaks(yy,'minpeakheight',200,'minpeakdistance',10);
fz=bb(kk,l);
  if size(l,2)>1
     zz=x(1,l(1,:));
     fz=bb(kk,l);
  else
       zz(1,8)=0;
       fz(1,8)=0;
  end
n=1;
cc=[zz;fz(1,:)];
cc=cc';
d=sortrows(cc,-2);
if size(d,1)>8
    dd=d(1:8,:);
    elseif size(d,1)<8||size(d,1)>0
       dd=d(1:size(d,1),:);
       dd(size(d,1)+1:8,:)=0;
else
        dd(8,:)=0;
end
  tzf(:,2*t-1:2*t)=[dd];             %[dd]的大小为8*27
  t=t+1;
end
A =tzf;           %8*58,8是维度，58是29*2
hh=figure;
t1=uitable('position',[50 50 500 300]);
set(t1,'data',A)
%下面开始BP神经网络的处理
%% 训练数据预测数据提取及归一化
%将8个维度的特征峰数据合成一个矩阵
sr1=tzf(1,2:2:end-2);  %选中数组的第一行，从数组的第二列开始，每隔一列取一列，直到倒数第三列(可以取）
sr2=tzf(2,2:2:end-2);  %选中数组的第二行，从数组的第二列开始，每隔一列取一列，直到倒数第三列(可以取）
sr3=tzf(3,2:2:end-2);  %选中数组的第三行，从数组的第二列开始，每隔一列取一列，直到倒数第三列(可以取）
sr4=tzf(4,2:2:end-2);  %选中数组的第四行，从数组的第二列开始，每隔一列取一列，直到倒数第三列(可以取）
sr5=tzf(5,2:2:end-2);  %选中数组的第五行，从数组的第二列开始，每隔一列取一列，直到倒数第三列(可以取）
sr6=tzf(6,2:2:end-2);  %选中数组的第六行，从数组的第二列开始，每隔一列取一列，直到倒数第三列(可以取）
sr7=tzf(7,2:2:end-2);  %选中数组的第七行，从数组的第二列开始，每隔一列取一列，直到倒数第三列(可以取）
sr8=tzf(8,2:2:end-2);  %选中数组的第八行，从数组的第二列开始，每隔一列取一列，直到倒数第三列(可以取）
p=[sr1;sr2;sr3;sr4;sr5;sr6;sr7;sr8];


jh1=tzf(1,1:2:end-2);  %选中数组的第一行，从数组的第一列开始，每隔一列取一列，直到倒数第三列(可以取）
jh2=tzf(2,1:2:end-2);  %选中数组的第二行，从数组的第一列开始，每隔一列取一列，直到倒数第三列(可以取）
jh3=tzf(3,1:2:end-2);  %选中数组的第三行，从数组的第一列开始，每隔一列取一列，直到倒数第三列(可以取）
jh4=tzf(4,1:2:end-2);  %选中数组的第四行，从数组的第一列开始，每隔一列取一列，直到倒数第三列(可以取）
jh5=tzf(5,1:2:end-2);  %选中数组的第五行，从数组的第一列开始，每隔一列取一列，直到倒数第三列(可以取）
jh6=tzf(6,1:2:end-2);  %选中数组的第六行，从数组的第一列开始，每隔一列取一列，直到倒数第三列(可以取）
jh7=tzf(7,1:2:end-2);  %选中数组的第七行，从数组的第一列开始，每隔一列取一列，直到倒数第三列(可以取）
jh8=tzf(8,1:2:end-2);  %选中数组的第八行，从数组的第一列开始，每隔一列取一列，直到倒数第三列(可以取）
q=[jh1;jh2;jh3;jh4;jh5;jh6;jh7;jh8];

%r6g是浓度的不同幂次
r6g=[-4 -4 -4 -4 -5 -5 -5 -5 -5 -6 -6 -6 -6 -6 -6 -6 -7 -7 -7 -7 -7 -8 -8 -8 -8 -8 -10 -10];
tt=[r6g];

%从1到28间随机排序
k=rand(1,28);           %从0—1 随机选取28个数并排序
[m,n]=sort(k);           %更准确的说，是m从小到大被排序了

%输入输出数据
input=p';
output=q';

%随机提取27个样本为训练样本，1个样本为预测样本
input_train=input(n(1:28),:)';
output_train=output(n(1:28),:)';
input_test=input(n(28:28),:)';
output_test=output(n(28:28),:)';

%输入数据归一化
[inputn,inputps]=mapminmax(input_train);
%% 网络结构初始化
%28个训练数据，28个测试数据，1预测数据，网络结构为8-8-1
innum=8;        %输入层
midnum=28;       %隐含层
outnum=28;        %输出层

%权值初始化
w1=rands(midnum,innum);     %输入层与隐含层之间的连接权值
b1=rands(midnum,1);         %隐含层阈值
w2=rands(midnum,outnum);    %隐含层与输出层之间的连接权值
b2=rands(outnum,1);         %输出层阈值

w2_1=w2;w2_2=w2_1;         %使得w2=w2_1=w2_2
w1_1=w1;w1_2=w1_1;
b1_1=b1;b1_2=b1_1;
b2_1=b2;b2_2=b2_1;

%学习率
xite=0.1;
alfa=0.01;


%% 网络训练
for ii=1:28              %训练10次，每次的误差都在降低，且很接近于0  这个次数可以加
    E(ii)=0;    %这里为什么出错
    for i=1:1:27       %循环，分别读取28个学习数据
       %% 网络预测输出 
        x=inputn(:,i);          %x分别取输入数据的每一列
        % 隐含层输出
        for j=1:1:midnum
            I(j)=inputn(:,i)'*w1(j,:)'+b1(j);   %ax+b，计算隐藏层输出   I有28次，但是大小为1*1 
            Iout(j)=1/(1+exp(-I(j)));       %利用隐藏层激励函数计算隐藏层输出 
        end
        % 输出层输出
        yn=w2'*Iout'+b2;
        
       %% 权值阀值修正
        %计算误差     也可以说是预测误差
        e=output_train(:,i)-yn';    %e就是正确答案减去训练结果，即误差，因为输出层为1，所以只有1类，e=1
        E(ii)=E(ii)+sum(abs(e));   %把误差加回到E(ii)
        
        %计算权值变化率     计算w2、b2调整量
        dw2=e*Iout;              %矩阵的乘法
        db2=e';
        %计算w1、b1的调整量
        for j=1:1:midnum
            S=1/(1+exp(-I(j)));
            FI(j)=S*(1-S);         
        end      
        for k=1:1:innum            %对于输入层的每一个k
            for j=1:1:midnum       %对于隐藏层的每一个j
                dw1(k,j)=FI(j)*x(k)*(e(1)*w2(1)+e(2)*w2(2)+e(3)*w2(3)+e(4)*w2(4)+e(5)*w2(5)+e(6)*w2(6)+e(7)*w2(7)+e(8)*w2(8));   %式(1-5)
                db1(j)=FI(j)*(e(1)*w2(1)+e(2)*w2(2)+e(3)*w2(3)+e(4)*w2(4)+e(5)*w2(5)+e(6)*w2(6)+e(7)*w2(7)+e(8)*w2(8));  %FI(j)即Hj(1-Hj) 
            end
        end
           
        w1=w1_1+xite*dw1';    %这一段已经自己推导代入过，没错
        b1=b1_1+xite*db1';
        w2=w2_1+xite*dw2';
        b2=b2_1+xite*db2';
        
        w1_2=w1_1;w1_1=w1;   %更新值
        w2_2=w2_1;w2_1=w2;
        b1_2=b1_1;b1_1=b1;
        b2_2=b2_1;b2_1=b2;
    end
end
 %以上都已经训练完了，接下来要利用剩下的1个数据输出结果了

 %% 特征峰信号分类
%输入数据归一化
inputn_test=mapminmax('apply',input_test,inputps);
%网络预测
for ii=1:1         %其实这个for循环没什么作用，因为只循环了一次
    for i=1:1%1
        %隐含层输出
        for j=1:1:midnum
            I(j)=inputn_test(:,i)'*w1(j,:)'+b1(j);
            Iout(j)=1/(1+exp(-I(j)));  % 隐含层输出
        end
        %预测结果
        fore(:,i)=w2'*Iout'+b2
    end
end





